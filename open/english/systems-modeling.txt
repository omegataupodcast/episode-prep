* Systems Modeling - what is this?
  - what is a system
    - Controller (usually this is what we want to build, right?)
    - Plant
    - Environment
  - what is a model :-)
    . and why do we create one.
* The structure (high level)
  - subsystem boundaries
  - the component/instance/connector/hierarchy idea
* Modeling Discrete Systems (start with those, closer to what people know?)
  - State Machines
  - Events
  - Actions
* Testing them
  - Event sequence in, assert out events, effects or state
  - Briefly introduce the notion of temporal logic and model checking
* Modeling Continuous Systems
  - Differential Equations 
    . what are those, intuitively
    . easy to implement, hard for modelers -> why?
  - Differential algebraic equations  
    . easy to model, hard for implementors -> why?
  - Modelica (hard to talk about the stuff below 
    with out introducing Modelica)
* Testing the
  [no idea]
* The structure
  - Bottom up: Equations, connectors, components, 
    subsystems, packages, architectures
  - interfaces & ports
  - what goes over ports
    - Plant: analogous to free body diagrams
    - Controller: data
  - instantiation
* Discrete vs. Continuous systems
  - what is dense time
    . Analogy to Rust's type system where "lifetime" is part of type
    . In Modelica, "clock" is part of the type.
    . Have to have a deterministic notion of simultaneity.
* Modeling both together: hybrid systems
  - what is the challenge here?
  - Example: Bouncing ball
* Applications 
  [we need some more of that Formula 1 stuff here :-)]
  
  - All this stuff is motivated by really useful applications
  - Hybrid Cars
    - Hydraulics
    - Clutches
    -power systems?
  - formula 1 ideas 
    - suspension modeling 
    - cfd 
    - tire modelling 
  - Robots
    - Diodes
    - Sensors
    - Magentic motors
  - Multi-body systems
* Related tools
  - Simulink/SimScape
  - CAE/CFD/FEM
  - FMI
  - SysML (esp. State Machines)
